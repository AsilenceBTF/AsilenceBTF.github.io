<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>写在前面</title>
      <link href="/2020/072355009.html"/>
      <url>/2020/072355009.html</url>
      
        <content type="html"><![CDATA[<p>zhende</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dream deverse</title>
      <link href="/2020/072338086.html"/>
      <url>/2020/072338086.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个测试页面</p></blockquote><pre class="line-numbers language-lang-c++"><code class="language-lang-c++">#define sz(x) int(x.size())#define ALL(x) x.begin(), x.end()#define lowbit(x) ((x) & (-x))#define INF 0x3f3f3f3f#define LNF 0x3f3f3f3f3f3f3f3f#define DOF 0x7f7f7f7ftypedef long long ll;const int N = 2e5 + 105;struct KM{    vector<vector<ll>> edge;    vector<int> pa;    vector<int> pb;    vector<bool> visx;    vector<bool> visy;    vector<int> pre;    vector<ll> lx;    vector<ll> ly;    vector<ll> slack;    ll res = 0, inf;    int n, _n, _m;    queue<int> que;    KM(int __n, int __m) : _n(__n), _m(__m)    {        res = 0;        inf = LNF;        n = max(_n, _m);        edge = vector<vector<ll>>(n + 1, vector<ll>(n + 1));        pa = vector<int>(n + 1);        pb = vector<int>(n + 1);        visx = vector<bool>(n + 1);        visy = vector<bool>(n + 1);        pre = vector<int>(n + 1);        lx = vector<ll>(n + 1, -inf);        ly = vector<ll>(n + 1);        slack = vector<ll>(n + 1);    }    void add(int u, int v, ll w)    {        edge[u][v] = max(0ll, w);    }    bool check(int v)    {        visy[v] = true;        if (pb[v])        {            que.push(pb[v]);            visx[pb[v]] = true;            return false;        }        while (v)        {            pb[v] = pre[v];            swap(v, pa[pre[v]]);        }        return true;    }    void bfs(int u)    {        while (!que.empty())            que.pop();        visx[u] = true;        que.push(u);        while (true)        {            while (!que.empty())            {                u = que.front();                que.pop();                for (int v = 1; v <= n; ++v)                {                    if (!visy[v])                    {                        ll delta = lx[u] + ly[v] - edge[u][v];                        if (slack[v] >= delta)                        {                            pre[v] = u;                            if (delta)                            {                                slack[v] = delta;                            }                            else if (check(v))                            {                                return;                            }                        }                    }                }            }            ll a = inf;            for (int i = 1; i <= n; ++i)            {                if (!visy[i])                {                    a = min(a, slack[i]);                }            }            for (int i = 1; i <= n; ++i)            {                if (visx[i])                {                    lx[i] -= a;                }                if (visy[i])                {                    ly[i] += a;                }                else                {                    slack[i] -= a;                }            }            for (int i = 1; i <= n; ++i)            {                if (!visy[i] && slack[i] == 0 && check(i))                {                    return;                }            }        }    }    void solve()    {        for (int i = 1; i <= n; ++i)        {            for (int j = 1; j <= n; ++j)            {                lx[i] = max(lx[i], edge[i][j]);            }        }        // for(int i = 1; i <= n; ++i) cout << lx[i] << " ";        for (int i = 1; i <= n; ++i)        {            fill(ALL(visx), false);            fill(ALL(visy), false);            fill(ALL(slack), inf);            bfs(i);        }        for (int i = 1; i <= n; ++i)        {            if (edge[i][pa[i]] > 0)            {                res += edge[i][pa[i]];            }            else            {                pa[i] = 0;            }        }        printf("%lld\n", res);        for (int i = 1; i <= _m; ++i)        {            printf("%d ", pb[i]);        }        printf("\n");    }};int main(){    int n, m;    scanf("%d%d", &n, &m);    KM km = KM(n, n);    for (int i = 1; i <= m; ++i)    {        int u, v, w;        scanf("%d%d%d", &u, &v, &w);        km.add(u, v, w);    }    km.solve();    // system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
